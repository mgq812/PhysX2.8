<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
  <meta http-equiv="content-type" content="">
  <title>Raycasting</title>
  <meta name="vs_targetSchema"
 content="http://schemas.microsoft.com/intellisense/ie5">
  <link rel="stylesheet" href="/stylesheet.css" type="text/css">
</head>
<body lang="en">
<img alt="" src="images/PhysXlogo.png" align="middle"> <br>
<hr style="width: 100%; height: 2px;"><br>
<br>
<h1 align="center">Raycasting</h1>
<p>Raycasting is basically collision detection with rays. However,
instead
of attaching the line segment to an actor like other shapes, it gets
cast
into the scene at the user's request, stabbing one or more shapes in
the
process. It has many uses, from picking up objects with the mouse to
checking if
there is a line of sight between two characters.</p>
<p>There are several functions of raycasting; each one
slightly different. They are all members of an NxScene called
raycast*(), and are listed below:</p>
<ul>
  <li>raycastAnyBounds, raycastAnyShape &#8211; these methods are the most
primitive, but also the fastest. They simply return true if the ray
that is specified hits any shape&#8217;s axis aligned bounding box, or the
shape itself. </li>
  <li>raycastClosestBounds, raycastClosestShape &#8211; similar to the first
two methods, here the closest shape that is stabbed by the ray is
returned, along with the distance along the ray and the ray-shape
intersection point. </li>
  <li>raycastAllBounds, raycastAllShapes &#8211; these are the most complex
versions, which return all of the shapes stabbed by the ray, including
distances and intersection points. To use these, you must provide an
NxUserRaycastReport interface, which will be called with information
for each of the stabbed shapes.</li>
</ul>
Below is an example for implementing NxUserRaycastReport with
the
raycastAllShapes() function:
<pre>    class myRaycastReport : public NxUserRaycastReport<br>    {</pre>
<pre>        virtual bool onHit(const NxRaycastHit&amp; hits)<br>        {</pre>
<pre>            //Record information here.<br>            return true; //Or false to stop the raycast.<br>        }</pre>
<pre>    }gMyReport;<br></pre>
<pre>    NxRay worldRay;<br>    worldRay.orig= cstart;<br>    worldRay.dir= cend - cstart;<br>    worldRay.dir.normalize(); //Important!!<br></pre>
<pre>    NxU32 nbShapes = gScene-&gt;raycastAllShapes(worldRay, gMyReport, NxUserRaycastReport::ALL_SHAPES);</pre>
<h2>Caveats</h2>
<ul>
  <li>Wheel shapes are not detected by raycasts.</li>
  <li>The shapes are not guaranteed to be passed to onHit() in
the order of their geometric layout along the ray.</li>
  <li>The SDK returns two face indices for raycast hits. faceID is the
face index for the mesh before it is cooked and internalFaceID is the
post-cooking face index (cooking can re-map face indices). The
internalFaceID should be used when referencing the cooked version of
the
mesh using readback functions and
saveToDesc(). (See <a href="mesh_readback.htm">Reading Back Mesh Data</a>
for more information.) <br>
  </li>
  <li>The state of the SDK should not be modified from within the
onHit() routine. In particular, objects should not be created
or destroyed. If it is necessary to modify state then the updates
should
be stored to a buffer and performed after the raycast.</li>
  <li>Because the SDK double buffers data to allow asynchronous
stepping state modification is not visible to some functions(eg overlap
and raycasting) until a simulate()/fetchResults() pair has been
executed.<br>
  </li>
</ul>
<h2>Threading</h2>
The NxUserRaycastReport <span lang="EN-US">class is only called in the
context of the user thread. It is not </span>necessary <span
 lang="EN-US">to make it thread safe.</span>
<h2>Samples</h2>
<p><a href="../TutorialsAndSamples/sampleRaycast.htm">Sample Raycast</a></p>
<h2>API Reference</h2>
<ul>
  <li><a href="./../../PhysicsSDK/classNxScene.html">NxScene</a></li>
  <li><a href="./../../PhysicsSDK/classNxUserRaycastReport.html">NxUserRaycastReport</a></li>
  <li><a href="./../../PhysicsSDK/structNxRaycastHit.html">NxRaycastHit</a></li>
  <li><a href="./../../PhysicsSDK/classNxTriangleMesh.html">NxTriangleMesh</a><br>
  </li>
</ul>
<hr style="width: 100%; height: 2px;"><a><br>
</a>
Copyright &copy; 2008 NVIDIA Corporation, 2701 San Tomas Expressway, Santa Clara, CA 95050 U.S.A. All rights reserved. <a href="http://www.nvidia.com ">www.nvidia.com</a>
</body>
</html>
